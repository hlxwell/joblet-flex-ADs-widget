<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" 
	layout="absolute"
	initialize="onLoad(event)"
	xmlns:local="*"
    backgroundColor="#ffffff"
    backgroundGradientColors="#ffffff, #ffffff"
	borderThickness="1" 
	borderColor="#000000"
	borderStyle="solid"
    verticalScrollPolicy="off" 
    horizontalScrollPolicy="off" xmlns:utils="flash.utils.*">

    <mx:Style>
    	.title {
			color: white;
			fontFamily: Arial;
			fontSize: 15;
			fontWeight: bold;
		}
		
		.htmlLink {
			paddingLeft: 0px;
		    fontSize: 14;
		    fontWeight: bold;
		    text-decoration:none;
		}
		
		.htmlLinkHover {
			paddingLeft: 0px;
		    fontSize: 14;
		    fontWeight: bold;
		    text-decoration:underline;
		    skin: ClassReference(null);
		}
		
		.htmlLink1 {
			paddingLeft: 0px;
		    fontSize: 11;
		    fontWeight: normal;
		    text-decoration:none;
		}
		
		.htmlLinkHover1	{
			paddingLeft: 0px;
		    fontSize: 11;
		    fontWeight: normal;
		    text-decoration:underline;
		    skin: ClassReference(null);
		}
		
		.arrow {
			fontSize: 12;
		    fontWeight: normal;
		}
    </mx:Style>
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.rpc.events.FaultEvent;
			import mx.collections.ArrayCollection;
			import mx.rpc.events.ResultEvent;
			
			[Bindable]
            private var jobs:ArrayCollection = new ArrayCollection();

			private var jobletHomeURL:String = "";
			private var FrameColor:String = "#000000";
			private var TitleWordColor:String = "#ffffff";
			private var ContentBgColor:String = "#ffffff";
			private var ContentWordColor:String = "#000000";
			private var miniWidth:int = 150;
			private var wordWidth:int = 100;
			private var imageWidth:int = 40;
			private var imageVisibility:Boolean = true;			
			private var params:Object = null;

			private function onLoad(event:Event):void {
				if(stage != null) {
					Alert.show(this.width.toString());
				}
				params = Application.application.parameters;
				setColor();
				sendRequest();
			}

			private function sendRequest():void {
				var request_params:Object = new Object();
                request_params.limit = '100';
//jobService.url = "http://staging.joblet.theplant-dev.com/blogs/1/ja/jobs.xml";
//jobService.url = "http://atom.joblet.theplant-dev.com/blogs/1/en/jobs.xml";
//jobService.url = "file:///Users/michael/Desktop/jobs.xml";
//jobService.url = "http://localhost:3000/blogs/1/ja/jobs.xml";
                jobService.url = params.service_url;
                jobService.send(request_params);
			}

			private function setColor():void {
				if(params.frame_color != null) {
					FrameColor = params.frame_color;
					TitleWordColor = params.title_color;
					ContentBgColor = params.content_bg_color;
					ContentWordColor = params.content_color;
				}

				titleFrame.setStyle("backgroundColor", FrameColor);
				title.setStyle("color", TitleWordColor);
				jobList.setStyle("backgroundColor", ContentBgColor);
				footFrame.setStyle("backgroundColor", ContentBgColor);
				footFrame.setStyle("color", ContentWordColor);
				upArrow.setStyle("color", ContentWordColor);
				downArrow.setStyle("color", ContentWordColor);
				this.setStyle("borderColor", FrameColor);
			}

			private function onDataResponse(event:ResultEvent):void {
				var new_jobs:ArrayCollection = new ArrayCollection();

				// set home link and title words
				jobletHomeURL = event.result.jobs.link_to_home;
				title.text = event.result.jobs.job_board_name;
				noRecord.text = event.result.jobs.no_record_text;
				linkToHome.label = event.result.jobs.more_jobs_text;

				if(stage != null) {
					// decide the column count and width
					if(stage.width > miniWidth && stage.width < 560) {
						jobList.columnWidth = stage.width - 5;
						jobList.columnCount = 1;
					} else if(stage.width >= 560 && stage.width < 840) {
						jobList.columnWidth = stage.width/2 - 5;
						jobList.columnCount = 2;
					} else if(stage.width <= miniWidth) {						
						jobList.columnWidth = miniWidth - 5;
						jobList.columnCount = 1;
					} else if(stage.width >= 840) {
						jobList.columnWidth = stage.width/3 - 5;
						jobList.columnCount = 3;
					}

					miniWidth = jobList.columnWidth;
					if(miniWidth > 185) {
						imageWidth = miniWidth * 0.3;
						wordWidth = miniWidth * 0.6;
						imageVisibility = true;
					} else {
						imageWidth = 0;
						wordWidth = miniWidth * 0.8;
						imageVisibility = false;
					}

					// decide the row count
					jobList.rowCount = (stage.height - 55) / 85;
				}

				if(event.result.jobs.job == null) {
					showNoRecord();
				} else if(event.result.jobs.job is ArrayCollection) {
					// add property to job object
					for each (var j:Object in event.result.jobs.job as ArrayCollection) {
						j.wordColor = ContentWordColor;
						j.miniWidth = miniWidth;
						j.wordWidth = wordWidth;
						j.imageWidth = imageWidth;
						j.imageVisibility = imageVisibility;
						new_jobs.addItem(j);
					}
				} else if(event.result.jobs.job != null) {
					var jj:Object = event.result.jobs.job;
					jj.wordColor = ContentWordColor;
					jj.miniWidth = miniWidth;
					jj.wordWidth = wordWidth;
					jj.imageWidth = imageWidth;
					jj.imageVisibility = imageVisibility;
					new_jobs.addItem(jj);
				}

				jobs = new_jobs;				
				loadingBar.visible = false;
			}

			private function showNoRecord():void {
				if(stage != null) {
					noRecord.setStyle("left", stage.width/2 - noRecord.width);
					noRecord.setStyle("top", stage.height/2 - noRecord.height/2);
					noRecord.visible = true;
				}
			}
			
			private function gotoJobletHome(event:MouseEvent):void {
				if(jobletHomeURL != "") {
					navigateToURL( new URLRequest( jobletHomeURL ), "_self" );
				}
			}
			
			private function onDataFault(event:FaultEvent):void {
				Alert.show(event.fault.faultString.toString(),"Widget Error!");
			}

			// page up and page down
			private function pageUp(event:MouseEvent):void {
				if( (jobList.verticalScrollPosition - jobList.rowCount) <= 0 ) {
					jobList.verticalScrollPosition =  0;
					showFlashWord("Already First Page!");
				} else {
					jobList.verticalScrollPosition -= jobList.rowCount;
				}
			}

			private function pageDown(event:MouseEvent):void {
				if( (jobList.verticalScrollPosition + jobList.rowCount) > jobList.maxVerticalScrollPosition ) {
					jobList.verticalScrollPosition = jobList.maxVerticalScrollPosition;
					showFlashWord("Already Last Page!");
				} else {
					jobList.verticalScrollPosition += jobList.rowCount;
				}
			}
			
			private function showFlashWord(str:String):void {
//				loadingBar.visible = true;
			}
		]]>
	</mx:Script>

	<mx:HTTPService id="jobService" result="onDataResponse(event)" fault="onDataFault(event)"/>

	<mx:VBox id="frame" 
		width="100%" height="100%" 
		left="0" top="0"
		verticalGap="0">

		<mx:VBox id="titleFrame" width="100%" verticalAlign="middle" height="30">
			<mx:Label id="title" text="Job Board" styleName="title" paddingLeft="10" paddingTop="2"/>
		</mx:VBox>
		<mx:TileList id="jobList"
			dataProvider="{jobs}" 
			selectable="false"
			width="100%"
			height="100%"
		    direction="horizontal"
		    columnWidth="150"
		    borderThickness="0"
		    verticalScrollPolicy="off"
		    horizontalScrollPolicy="off">
			<mx:itemRenderer>
				<mx:Component>
					<local:widget_item />
	            </mx:Component>
			</mx:itemRenderer>
		</mx:TileList>

		<mx:VBox id="footFrame" width="100%" verticalAlign="bottom">
			<mx:LinkButton id="linkToHome"
				label="More jobs on AMN Job Board"
				styleName="htmlLinkHover1"
			    paddingLeft="5"
			    paddingTop="5"
			    click="gotoJobletHome(event)"/>
	    </mx:VBox>
	</mx:VBox>

	<!-- page button -->
	<mx:LinkButton label="▲" top="31" right="1" click="pageUp(event)" styleName="arrow" id="upArrow"/>
	<mx:LinkButton label="▼" bottom="1" right="1" click="pageDown(event)" styleName="arrow" id="downArrow"/>
	<mx:Label id="noRecord" text="No Jobs Yet!" styleName="title" color="red" visible="false"/>
	<mx:SWFLoader id="loadingBar" source="loading.swf" top="40" left="10"/>
</mx:Application>